<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="panel1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        bwDw7u9//w+V/AJ4pm2+jwAAAABJRU5ErkJggg==
</value>
  </data>
</root>